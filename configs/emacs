;;; .emacs --- chripell's chaotic dot emacs file.
;;; Commentary:

;;; Code:

;; Default packaging.
;; problems to connect go GNU ELPA.
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

;; Add ~/elisp/ to directories path.
(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
    (let* ((my-lisp-dir "~/elisp/")
	   (default-directory my-lisp-dir))
      (setq load-path (cons my-lisp-dir load-path))
      (normal-top-level-add-subdirs-to-load-path)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu 0.8)
 '(ac-auto-start nil)
 '(ac-set-trigger-key "<backtab>")
 '(ac-trigger-key "<backtab>")
 '(auto-coding-regexp-alist
   (quote
    (("^BABYL OPTIONS:[ 	]*-\\*-[ 	]*rmail[ 	]*-\\*-" . no-conversion)
     ("<meta\\b[^>]*\\bcontent=\"text/html; charset=UTF-8\"[^>]*>" . utf-8)
     ("<\\?xml\\b[^>]*\\bencoding=\"utf-8\"[^>]*\\?>" . utf-8))))
 '(case-fold-search t)
 '(column-number-mode t)
 '(current-language-environment "English")
 '(ecb-layout-window-sizes nil)
 '(ecb-options-version "2.40")
 '(ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))
 '(eldoc-echo-area-use-multiline-p t)
 '(eldoc-minor-mode-string nil)
 '(elpy-eldoc-show-current-function nil)
 '(flycheck-posframe-error-prefix "!! ")
 '(flycheck-posframe-warning-prefix "! ")
 '(global-font-lock-mode t nil (font-lock))
 '(gofmt-command "goimports")
 '(indicate-buffer-boundaries (quote ((t . right) (top . left))))
 '(indicate-empty-lines t)
 '(inhibit-startup-screen t)
 '(jde-jdk-registry (quote (("1.6" . "/opt/java"))))
 '(lsp-ui-sideline-enable nil)
 '(mouse-yank-at-point t)
 '(package-selected-packages
   (quote
    (ws-butler wanderlust go-projectile iedit bpftrace-mode dap-mode company-lsp eglot lsp-mode flycheck-yamllint flymake-yaml yaml-imenu flycheck-mypy company-lua flymake-lua magit-gh-pulls elpy flymake-python-pyflakes go-guru go-mode go-autocomplete flymake-go menu-bar+ markdown-preview-mode browse-kill-ring+ android-mode)))
 '(projectile-tags-command "make_TAGS \"%s\" %s")
 '(save-place t nil (saveplace))
 '(scroll-bar-mode (quote right))
 '(set-mark-command-repeat-pop t)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(speedbar-show-unknown-files t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Make sure selected packages are installed (cross-systems).
(package-install-selected-packages)

;; Enable Lua mode.
(setq auto-mode-alist (cons '("\.lua$" . lua-mode) auto-mode-alist))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-hook 'lua-mode-hook 'turn-on-font-lock)

;; Use aspell for spell checking.
(setq-default ispell-program-name "aspell")

;; I am not scarred by narrow to region. ;-)
(put 'narrow-to-region 'disabled nil)

;; UTF-8 all the way!
(set-default-coding-systems 'utf-8)

;; Enable Javascript mode.
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
(autoload 'javascript-mode "javascript" nil t)

;; wanderlust email client.
(autoload 'wl "wl" "Wanderlust" t)
(autoload 'wl-other-frame "wl" "Wanderlust on new frame." t)
(autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
;; IMAP
(setq elmo-imap4-default-server "imap.gmail.com")
(setq elmo-imap4-default-user "chripell@gmail.com")
(setq elmo-imap4-default-authenticate-type 'clear)
(setq elmo-imap4-default-port '993)
(setq elmo-imap4-default-stream-type 'ssl)
(setq elmo-imap4-use-modified-utf7 t)
;; SMTP
(setq wl-smtp-connection-type 'starttls)
(setq wl-smtp-posting-port 587)
(setq wl-smtp-authenticate-type "plain")
(setq wl-smtp-posting-user "chripell")
(setq wl-smtp-posting-server "smtp.gmail.com")
(setq wl-local-domain "gmail.com")
(setq wl-default-folder "%inbox")
(setq wl-default-spec "%")
(setq wl-draft-folder "%[Gmail]/Drafts") ; Gmail IMAP
(setq wl-trash-folder "%[Gmail]/Trash")
(setq wl-folder-check-async t)
(autoload 'wl-user-agent-compose "wl-draft" nil t)
(if (boundp 'mail-user-agent)
    (setq mail-user-agent 'wl-user-agent))
(if (fboundp 'define-mail-user-agent)
    (define-mail-user-agent
      'wl-user-agent
      'wl-user-agent-compose
      'wl-draft-send
      'wl-draft-kill
      'mail-send-hook))
(setq wl-from "Christian Pellegrin <chripell@gmail.com>"
      ;; All system folders (draft, trash, spam, etc) are placed in the
      ;; [Gmail]-folder, except inbox. "%" means it's an IMAP-folder
      wl-default-folder "%inbox"
      wl-draft-folder   "%[Gmail]/Drafts"
      wl-trash-folder   "%[Gmail]/Trash"
      ;; The below is not necessary when you send mail through Gmail's SMTP server,
      ;; see https://support.google.com/mail/answer/78892?hl=en&rd=1
      ;; wl-fcc            "%[Gmail]/Sent"

      ;; Mark sent messages as read (sent messages get sent back to you and
      ;; placed in the folder specified by wl-fcc)
      wl-fcc-force-as-read    t

      ;; For auto-completing foldernames
      wl-default-spec "%")
;; mailcrypt
;; (require 'mailcrypt)
;; (add-hook 'wl-summary-mode-hook 'mc-install-read-mode)
;; (add-hook 'wl-mail-setup-hook 'mc-install-write-mode)
;; (defun mc-wl-verify-signature ()
;;   (interactive)
;;   (save-window-excursion
;;     (wl-summary-jump-to-current-message)
;;     (mc-verify)))
;; (defun mc-wl-decrypt-message ()
;;   (interactive)
;;   (save-window-excursion
;;     (wl-summary-jump-to-current-message)
;;     (let ((inhibit-read-only t))
;;       (mc-decrypt))))
;; (eval-after-load "mailcrypt"
;;   '(setq mc-modes-alist
;;        (append
;;         (quote
;;          ((wl-draft-mode (encrypt . mc-encrypt-message)
;;             (sign . mc-sign-message))
;;           (wl-summary-mode (decrypt . mc-wl-decrypt-message)
;;             (verify . mc-wl-verify-signature))))
;;         mc-modes-alist)))

;; Enable Python mode.
(autoload 'python-mode "python-mode.el" "Python mode." t)
(setq auto-mode-alist (append '(("/.*\.py\'" . python-mode)) auto-mode-alist))
;; Enable elpy.
(elpy-enable)
;; Enable MyPy
(eval-after-load 'flymake '(require 'flymake-mypy))

;; Nicer menu bar.
(eval-after-load "menu-bar" '(require 'menu-bar+))

;; Load Go guru.
(require 'go-guru)
;; Run gofmt on save, Change some keybindings for Go.
(defun my-go-mode-hook ()
  "Hook for Go mode."
  (add-hook 'before-save-hook 'gofmt-before-save)
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  (go-guru-hl-identifier-mode)
  (auto-complete-mode 1)
  )
(add-hook 'go-mode-hook 'my-go-mode-hook)

;; Sppedbar stuff, on F12 open, S-F12 close.
(require 'sr-speedbar)
(defun sr-speedbar-open-and-select ()
 "Opens and select SR Speedbar."
 (interactive) (sr-speedbar-open) (sr-speedbar-select-window))

;; Shift + arrows move point between windows..
(require 'cl)
(require 'windmove)
;; The next macro ignores error if there is no windows on the left.
(defun ignore-error-wrapper (fn)
  "Function return new function that ignore errors.
The function wraps a function FN with `ignore-errors' macro."
  (lexical-let ((fn fn))
    (lambda ()
      (interactive)
      (ignore-errors
        (funcall fn)))))
(global-set-key [S-left] (ignore-error-wrapper 'windmove-left))
(global-set-key [S-right] (ignore-error-wrapper 'windmove-right))
(global-set-key [S-up] (ignore-error-wrapper 'windmove-up))
(global-set-key [S-down] (ignore-error-wrapper 'windmove-down))

;; IDO for fancy M-X and friends completion.
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(require 'ido-completing-read+)
(ido-ubiquitous-mode 1)
(require 'smex)
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
(setq magit-completing-read-function 'magit-ido-completing-read)
(require 'icomplete)
(icomplete-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; Sound is annoying, just flash the screen on error.
(setq ring-bell-function
      (lambda ()
        (let ((orig-fg (face-foreground 'mode-line)))
          (set-face-foreground 'mode-line "#F2804F")
          (run-with-idle-timer 0.1 nil
                               (lambda (fg) (set-face-foreground 'mode-line fg))
                               orig-fg))))

;; Enable projectile mode.
(projectile-mode)
(require 'projectile-speedbar)

;; Enable spelling everywhere.
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'after-init-hook #'global-flycheck-mode)

;; C-c y shows the content of the kill ring.
(global-set-key "\C-cy" 'browse-kill-ring)

;; Move to/from *clipboard*:
;; S-Inset Paste
;; C-Insert Copy
;; S-Delete Cut
(require 'simpleclip)
(simpleclip-mode 1)

;; rcirc IRC client setup.
(setq rcirc-server-alist
      '(("irc.freenode.net" :port 6697 :encryption tls)))
(setq rcirc-default-nick "chripell")
(load "~/elisp/pass")

;;; lsp mode everywhere!
(require 'lsp-mode)
(add-hook 'prog-mode-hook #'lsp)

;;; Enable Debugger Adapter Mode.
(dap-mode 1)
(dap-ui-mode 1)
(dap-tooltip-mode 1)
(tooltip-mode 1)
(dap-ui-controls-mode 1)
(require 'dap-go)

;;; Enable bpftrace mode.
(require 'bpftrace-mode)

;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
;; ## end of OPAM user-setup addition for emacs / base ## keep this line

;; insertion of argument to go functions and such
(require 'yasnippet)
(setq yas-snippet-dirs
      '("~/git/yasnippet-snippets/snippets"))
(yas-global-mode 1)

;; posframe to show suggestions.
(require 'ivy-posframe)
;; display at `ivy-posframe-style'
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
(ivy-posframe-mode 1)
(require 'company-posframe)
(company-posframe-mode 1)
(with-eval-after-load 'flycheck
  (require 'flycheck-posframe)
  (flycheck-posframe-configure-pretty-defaults)
  (custom-set-variables
   '(flycheck-posframe-error-prefix "!! ")
   '(flycheck-posframe-warning-prefix "! "))
  (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
(helm-posframe-enable)

;; ws_butler for unobtrusively delete  whitespace
(require 'ws-butler)
(ws-butler-global-mode)

;; customize company mode, no delay and active everywhere
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)
(setq company-selection-wrap-around t)

;; My personalized shortcuts:
(global-set-key [f5] 'compile)
(global-set-key (kbd "<f12>") 'sr-speedbar-open-and-select)
(global-set-key (kbd "<S-f12>") 'sr-speedbar-close)
(global-set-key [kp-left] 'backward-sexp)
(global-set-key [kp-right] 'forward-sexp)
(global-set-key [kp-up] 'backward-up-list)
(global-set-key [kp-down] 'down-list)
(global-set-key [kp-prior] 'beginning-of-defun)
(global-set-key [kp-next] 'end-of-defun)
(global-set-key [kp-begin] 'beginning-of-buffer)
(global-set-key [kp-end] 'end-of-buffer)
(global-set-key [kp-insert] 'set-mark-command)
(global-set-key [kp-delete] 'pop-global-mark)

(provide '.emacs)
;;; .emacs ends here
